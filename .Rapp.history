end()
<-
>-
""
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames()
colnames(cnames, my_data)
colnames(my_data, cname)
colnames(my_data, cnames)
colnames(my_data) <- cnames
my_data
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vector <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
flag_shapes
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <-lapply(unique, unique)
unique_vals <-lapply(flags, unique)
unique_vlas
unique_vals
sapply(unique_vlas, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, unique)
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
table(flags$animate, flags$landmass, mean)
tapple(flags$animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(0:100, c(0,1)
)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm()
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
?rpois
rpois(5)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist cm
hist(sm)
hist(cm)
Sys.Date()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.Time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time)
t2 <- as.POSIXlt(Sys.time()))
t2 <- as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- c(October 17, 1986 08:24)
t3 <- c("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = "days")
library(datasets)
data(iris)
?iric
?iris
iris
z <- mean[iris]$Petal.Length
iris$Petal.Length
iris$Petal.Length[101:150]
iris$Sepal.Length[101:150]
r <- mean(iris$Sepal.Length[101:150])
r
colMeans(iris)
apply(iris, 1, mean)
rowMeans(iris[,1:4])
colMeans(iris)
apply(iris[,1-4], 2, mean)
?colMeans
apply(iris, 1,mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
mtcars
?mtcars
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
?average
?mena
?mean
tapply(mtcars$hp, mtcars$cyl, mean)
hp <- tapply(mtcars$hp, mtcars$cyl, mean)
hp
hp$4
hp$1
hp[4]
hp[1]
hp[2]
hp[3]
?abs
??abs
?abs()
v <- abs(hp[3] - hp[1])
v
v <- hp[3] - hp[1]
v
v <- hp[3hp] - hp[1]
hp[1]
hp[1:2]
hp[1:3]
hp[1,3
]
x <- abs(209.21429 - 82.63636)
x
debug(ls)
ls
?mtcars
exit
quit()
library(datasets)
data(mtcars)
?mtcars
mtcars
apply(mtcars, 2, mean)
sapply(mtcar, cyl, mean)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
set.seed(1)
rpois(5,2)
?rnorm
?rnorm()
?set.seed
set.seed(10)
x <- rbinom(10,10,0.5)
e <- rnorm(10,0,20)
y <- 0.5 + 2 * x + e
y
?dbinom()
src-data <- read.csv("./household_power_consumption.txt")
src_data <- read.csv("./household_power_consumption.txt")
names(src_data)
head(src_data)
src_data <- read.csv("./household_power_consumption.txt", sep=";", na.strings = "?")
names(src_data)
head(src_data)
summary(src_data)
summary(src_data, maxsum=20)
describe(src_data)
str(src_data)
src_data <- read.csv("./household_power_consumption.txt", sep=";", na.strings = "?", colClasses=c("character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
str(src_data)
src_data <- read.csv("./household_power_consumption.txt", sep=";", na.strings = "?", stringsAsFactors = "false")
src_data <- read.csv("./household_power_consumption.txt", sep=";", na.strings = "?", stringsAsFactors = FALSE)
str(src_data)
working_dataset <- src_data[(src_data$Date == "1/2/2007" | src_data$Date == 2/2/2007),]
head(working_dataset)
tail(working_dataset)
cat(working_dataset)
summary(working_dataset)
hist(data$Global_active_power, col="red", xlab = "Global Active Power (kilowatts)", main = "Global Active Power")
hist(working_dataset$Global_active_power, col="red", xlab = "Global Active Power (kilowatts)", main = "Global Active Power")
working_dataset <- src_data[(src_data$Date == "1/2/2007" | src_data$Date == "2/2/2007"),]
hist(working_dataset$Global_active_power, col="red", xlab = "Global Active Power (kilowatts)", main = "Global Active Power")
hist(working_dataset$Global_active_power, col="red", xlab = "Global Active Power (kilowatts)", main = "Global Active Power")
plot(data$unixTime, data$Global_active_power, type = "n", ylab = "Global Active Power (kilowatts)", xlab="")#
lines(data$unixTime, data$Global_active_power)
plot(data$unixTime, data$Global_active_power, type = "n", ylab = "Global Active Power (kilowatts)", xlab="")#
lines(data$unixTime, data$Global_active_power)
data$unixTime = strptime(paste(working_dataset$Date, data$Time), "%d/%m/%Y %H:%M:%S")
working_dataset$unixTime = strptime(paste(working_dataset$Date, data$Time), "%d/%m/%Y %H:%M:%S")
working_dataset$unixTime = strptime(paste(working_dataset$Date, working_dataset$Time), "%d/%m/%Y %H:%M:%S")
plot(working_dataset$unixTime, working_dataset$Global_active_power, type = "n", ylab = "Global Active Power (kilowatts)", xlab="")
Sys.setlocale("LC_TIME","en_US.UTF-8")
working_dataset$unixTime = strptime(paste(working_dataset$Date, working_dataset$Time), "%d/%m/%Y %H:%M:%S")
plot(working_dataset$unixTime, working_dataset$Global_active_power, type = "n", ylab = "Global Active Power (kilowatts)", xlab="")
lines(working_dataset$unixTime, working_dataset$Global_active_power)
y
